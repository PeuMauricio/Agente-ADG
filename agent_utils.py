import os
import zipfile
from pathlib import Path


class GerenciadorDeArquivos:
    """
    Classe de utilidades focada em opera칞칫es de manipula칞칚o de arquivos,
    como a descompacta칞칚o de pacotes ZIP.
    """

    @staticmethod
    def extrair_zip(caminho_do_zip: str, pasta_destino: str = None) -> Path:
        """
        Realiza a extra칞칚o de um arquivo compactado no formato .zip para um
        diret칩rio de destino. Se nenhum destino for fornecido, a extra칞칚o
        ocorrer치 em uma nova pasta com o mesmo nome do arquivo ZIP.

        Args:
            caminho_do_zip (str): O caminho completo para o arquivo .zip a ser extra칤do.
            pasta_destino (str, optional): O diret칩rio onde o conte칰do ser치 extra칤do.
                                           Se omitido, um diret칩rio padr칚o 칠 criado.

        Returns:
            Path: O objeto Path apontando para o diret칩rio de destino com os arquivos extra칤dos.

        Raises:
            FileNotFoundError: Lan칞ado se o arquivo ZIP n칚o for encontrado ou for inv치lido.
        """
        caminho_zip_obj = Path(caminho_do_zip)

        if not caminho_zip_obj.is_file() or not zipfile.is_zipfile(caminho_zip_obj):
            raise FileNotFoundError(
                f"O arquivo ZIP especificado 칠 inv치lido ou n칚o foi encontrado em: {caminho_zip_obj}"
            )

        # Define o diret칩rio de destino
        if pasta_destino:
            diretorio_final = Path(pasta_destino)
        else:
            diretorio_final = caminho_zip_obj.parent / caminho_zip_obj.stem
        
        # Garante que o diret칩rio de destino exista
        diretorio_final.mkdir(parents=True, exist_ok=True)

        with zipfile.ZipFile(caminho_zip_obj, "r") as zip_ref:
            zip_ref.extractall(diretorio_final)
            print(f"游닍 Arquivo ZIP extra칤do com sucesso para o diret칩rio: {diretorio_final.resolve()}")

        return diretorio_final

    @staticmethod
    def descompactar_zip_condicionalmente(diretorio_alvo: str, caminho_do_zip: str) -> Path:
        """
        Gerencia a descompacta칞칚o de um arquivo ZIP de forma inteligente,
        extraindo-o apenas se o diret칩rio de destino estiver vazio.
        Isso evita reprocessamento desnecess치rio.

        Args:
            diretorio_alvo (str): O caminho do diret칩rio que deve receber os arquivos.
            caminho_do_zip (str): O caminho completo para o arquivo .zip.

        Returns:
            Path: O objeto Path para o diret칩rio de destino.
        """
        pasta_obj = Path(diretorio_alvo)

        if not pasta_obj.exists():
            print(f"INFO: O diret칩rio de destino n칚o existe. Criando em: {pasta_obj}")
            pasta_obj.mkdir(parents=True)

        # Verifica se o diret칩rio j치 tem algum conte칰do
        if any(pasta_obj.iterdir()):
            print(
                f"INFO: O diret칩rio '{pasta_obj}' j치 possui conte칰do. A extra칞칚o ser치 ignorada."
            )
            return pasta_obj
        else:
            print(f"A칂츾O: O diret칩rio '{pasta_obj}' est치 vazio. Iniciando o processo de extra칞칚o...")
            try:
                return GerenciadorDeArquivos.extrair_zip(caminho_do_zip, diretorio_alvo)
            except Exception as e:
                print(f"ERRO CR칈TICO: A descompacta칞칚o falhou. Motivo: {e}")
                raise