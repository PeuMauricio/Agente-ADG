import json
import os
import shutil
from pathlib import Path
from typing import Annotated

import uvicorn
from fastapi import BackgroundTasks, FastAPI, File, Form, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.staticfiles import StaticFiles

from agent_utils import GerenciadorDeArquivos
from fluxo import FluxoEDA

# --- Configura√ß√£o da Aplica√ß√£o FastAPI ---
app = FastAPI(
    title="Assistente de An√°lise de Dados com IA",
    description="Uma API RESTful que serve como interface para uma equipe de agentes de IA especializados em An√°lise Explorat√≥ria de Dados (EDA) sobre arquivos CSV.",
    version="1.0.0",
)

# --- Configura√ß√£o de CORS (Cross-Origin Resource Sharing) ---
# Permite que o frontend (mesmo em origens diferentes) se comunique com a API.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, restrinja a dom√≠nios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- Gerenciamento de Diret√≥rios ---
# Define e cria os diret√≥rios necess√°rios para uploads e sa√≠das.
DIRETORIO_UPLOADS = Path("./uploads")
DIRETORIO_UPLOADS.mkdir(exist_ok=True)

DIRETORIO_SAIDAS = Path("./outputs")
DIRETORIO_SAIDAS.mkdir(exist_ok=True)


# --- Fun√ß√µes de Limpeza em Background ---
def limpar_arquivo(caminho: str) -> None:
    """Remove um arquivo de forma segura em uma tarefa de fundo."""
    try:
        if os.path.exists(caminho):
            os.remove(caminho)
            print(f"üßπ Arquivo tempor√°rio limpo: {caminho}")
    except Exception as e:
        print(f"‚ùóÔ∏è Falha ao limpar o arquivo {caminho}: {e}")


def limpar_diretorio(caminho: str) -> None:
    """Remove um diret√≥rio e todo o seu conte√∫do em uma tarefa de fundo."""
    try:
        if os.path.exists(caminho):
            shutil.rmtree(caminho)
            print(f"üßπ Diret√≥rio tempor√°rio limpo: {caminho}")
    except Exception as e:
        print(f"‚ùóÔ∏è Falha ao limpar o diret√≥rio {caminho}: {e}")


# --- Endpoint Principal de Intera√ß√£o ---
@app.post("/chat/")
async def interagir_com_agente(
    file: Annotated[UploadFile, File()],
    question: Annotated[str, Form()],
    background_tasks: BackgroundTasks,
):
    """
    Endpoint central para processar solicita√ß√µes de an√°lise de dados.
    Recebe um arquivo (.csv ou .zip) e uma pergunta, orquestra a an√°lise
    pelos agentes de IA e retorna o resultado.
    """
    try:
        print(f"üì® Nova solicita√ß√£o recebida: {file.filename}")
        print(f"üí¨ Pergunta do usu√°rio: '{question}'")

        # Salva o arquivo enviado em um local tempor√°rio
        caminho_arquivo_upload = DIRETORIO_UPLOADS / file.filename
        with caminho_arquivo_upload.open("wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        # Processa o arquivo, descompactando se for um ZIP
        if caminho_arquivo_upload.suffix == ".zip":
            pasta_descompactada = DIRETORIO_SAIDAS / caminho_arquivo_upload.stem
            GerenciadorDeArquivos.descompactar_zip_condicionalmente(str(pasta_descompactada), str(caminho_arquivo_upload))
            arquivos_csv_encontrados = list(pasta_descompactada.glob("*.csv"))
            if not arquivos_csv_encontrados:
                return {"error": "O arquivo ZIP fornecido n√£o cont√©m nenhum arquivo CSV."}
            caminho_final_csv = str(arquivos_csv_encontrados[0])
            background_tasks.add_task(limpar_diretorio, str(pasta_descompactada))
        elif caminho_arquivo_upload.suffix == ".csv":
            caminho_final_csv = str(caminho_arquivo_upload)
        else:
            return {
                "error": "Formato de arquivo inv√°lido. Apenas arquivos .csv e .zip s√£o aceitos."
            }

        # Agenda a remo√ß√£o do arquivo de upload original ap√≥s a resposta ser enviada
        background_tasks.add_task(limpar_arquivo, str(caminho_arquivo_upload))

        # Inicializa e executa o fluxo de an√°lise
        print("ü§ñ Acionando a equipe de agentes de IA...")
        fluxo_analise = FluxoEDA(caminho_csv=caminho_final_csv)

        dados_resposta = fluxo_analise.executar(question)
        print(f"üí° Resposta recebida da equipe de agentes.")
        print(f"   - Tipo da resposta: {type(dados_resposta)}")

        # --- Roteamento da Resposta com Base no Conte√∫do ---

        if isinstance(dados_resposta, dict) and dados_resposta.get("image_url"):
            # Cen√°rio 1: A resposta √© uma visualiza√ß√£o gr√°fica.
            url_imagem_local = dados_resposta["image_url"]
            nome_arquivo_grafico = Path(url_imagem_local).name

            print(f"üñºÔ∏è  Resposta cont√©m uma visualiza√ß√£o: {nome_arquivo_grafico}")
            return {
                "response": dados_resposta.get(
                    "text", "A visualiza√ß√£o solicitada foi gerada."
                ),
                "image_url": f"/outputs/{nome_arquivo_grafico}",
            }

        elif isinstance(dados_resposta, dict) and dados_resposta.get("response"):
            # Cen√°rio 2: A resposta √© uma an√°lise textual.
            return dados_resposta

        else:
            # Cen√°rio de fallback para respostas inesperadas.
            return {
                "error": f"Formato de resposta inesperado ou inv√°lido recebido dos agentes: {dados_resposta}"
            }

    except Exception as e:
        print(f"üö® Erro cr√≠tico no endpoint /chat/: {e}")
        import traceback
        traceback.print_exc()
        return {"error": f"Ocorreu um erro interno no servidor: {str(e)}"}


# --- Endpoints de Suporte ---

@app.get("/outputs/{filename}")
async def servir_arquivo_de_saida(filename: str):
    """Serve os arquivos gerados (como gr√°ficos) a partir do diret√≥rio de sa√≠das."""
    caminho_arquivo = DIRETORIO_SAIDAS / filename
    if caminho_arquivo.is_file():
        return FileResponse(caminho_arquivo)
    else:
        return {"error": "O arquivo solicitado n√£o foi encontrado."}


@app.get("/healthcheck")
async def verificar_saude_api():
    """Endpoint de verifica√ß√£o de sa√∫de para monitoramento."""
    return {
        "status": "operacional",
        "message": "A API do Assistente de An√°lise de Dados est√° online.",
        "chave_openai_configurada": "OPENAI_API_KEY" in os.environ and bool(os.getenv("OPENAI_API_KEY")),
    }


@app.get("/", response_class=HTMLResponse)
async def servir_pagina_principal():
    """Serve a interface do usu√°rio (frontend) na rota raiz."""
    try:
        caminho_html = "index.html"
        with open(caminho_html, encoding="utf-8") as f:
            conteudo_html = f.read()
        return HTMLResponse(content=conteudo_html, status_code=200)
    except FileNotFoundError:
        return HTMLResponse(
            content="<h1>Erro 404: Interface n√£o encontrada</h1><p>Verifique se a pasta 'frontend' com o arquivo 'index.html' est√° presente na raiz do projeto.</p>",
            status_code=404,
        )


# --- Montagem de Diret√≥rios Est√°ticos ---
# Permite que o FastAPI sirva arquivos CSS, JS e imagens diretamente.
app.mount("/static", StaticFiles(directory="."), name="static")
app.mount("/outputs", StaticFiles(directory="outputs"), name="outputs")

# --- Ponto de Entrada para Execu√ß√£o ---
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)