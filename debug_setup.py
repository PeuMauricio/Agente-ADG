#!/usr/bin/env python3
"""
Script de diagn√≥stico para validar o ambiente de execu√ß√£o do projeto CrewAI.
Realiza um check-up completo da configura√ß√£o, desde a vers√£o do Python at√© a
conectividade com a API da OpenAI.
"""

import os
import sys
from pathlib import Path


def validar_versao_python():
    """Verifica se a vers√£o do interpretador Python atende aos requisitos."""
    versao = sys.version_info
    print(f"Interpretador Python detectado: {versao.major}.{versao.minor}.{versao.micro}")
    if versao.major < 3 or (versao.major == 3 and versao.minor < 8):
        print("‚õîÔ∏è INCOMPAT√çVEL: √â necess√°rio Python 3.8 ou superior.")
        return False
    print("‚úîÔ∏è Vers√£o do Python compat√≠vel.")
    return True


def auditar_dependencias():
    """Audita a instala√ß√£o das bibliotecas Python essenciais."""
    pacotes_necessarios = [
        "crewai",
        "pandas",
        "matplotlib",
        "seaborn",
        "fastapi",
        "uvicorn",
        "python-dotenv",
        "openai",
    ]

    ausentes = []
    for pacote in pacotes_necessarios:
        try:
            # O nome do m√≥dulo pode ser diferente do nome do pacote (ex: python-dotenv -> dotenv)
            __import__(pacote.replace("-", "_"))
            print(f"‚úîÔ∏è {pacote} - Instalado")
        except ImportError:
            print(f"‚õîÔ∏è {pacote} - N√ÉO ENCONTRADO")
            ausentes.append(pacote)

    if ausentes:
        print(f"\nüõ†Ô∏è A√ß√£o necess√°ria: Instale os pacotes ausentes com o comando:")
        print(f"pip install {' '.join(ausentes)}")
        return False

    return True


def inspecionar_versao_crewai():
    """Verifica a vers√£o da biblioteca CrewAI e a integridade de suas importa√ß√µes."""
    try:
        import crewai

        versao = getattr(crewai, "__version__", "n√£o identificada")
        print(f"Vers√£o do CrewAI: {versao}")

        # Valida se os componentes principais podem ser importados
        from crewai import LLM, Agent, Crew, Process, Task

        print("‚úîÔ∏è Importa√ß√µes essenciais do CrewAI funcionam corretamente.")
        return True
    except Exception as e:
        print(f"‚õîÔ∏è Falha na verifica√ß√£o do CrewAI: {e}")
        return False


def verificar_arquivo_config():
    """Analisa a exist√™ncia e o conte√∫do do arquivo de configura√ß√£o .env."""
    caminho_env = Path(".env")
    if not caminho_env.exists():
        print("‚õîÔ∏è Arquivo de configura√ß√£o '.env' n√£o localizado.")
        print("Instru√ß√£o: Crie um arquivo chamado .env na raiz do projeto com o seguinte conte√∫do:")
        print("OPENAI_API_KEY=sua-chave-de-api-aqui")
        return False

    from dotenv import load_dotenv
    load_dotenv()

    chave_api = os.getenv("OPENAI_API_KEY")
    if not chave_api:
        print("‚õîÔ∏è A vari√°vel OPENAI_API_KEY n√£o foi encontrada dentro do arquivo .env.")
        return False

    if chave_api.startswith("sk-") and len(chave_api) > 20:
        print("‚úîÔ∏è A vari√°vel OPENAI_API_KEY parece estar configurada corretamente.")
        return True
    else:
        print("‚ö†Ô∏è ALERTA: O formato da OPENAI_API_KEY parece inv√°lido. Verifique se copiou a chave completa.")
        return False


def checar_estrutura_diretorios():
    """Verifica se a estrutura de pastas esperada pelo projeto existe."""
    pastas_projeto = ["uploads", "outputs", "frontend"]
    for nome_pasta in pastas_projeto:
        caminho_pasta = Path(nome_pasta)
        if caminho_pasta.exists():
            print(f"‚úîÔ∏è Diret√≥rio '{nome_pasta}/' encontrado.")
        else:
            print(f"‚ÑπÔ∏è INFORMATIVO: O diret√≥rio '{nome_pasta}/' n√£o existe e ser√° criado durante a execu√ß√£o, se necess√°rio.")


def testar_configuracao_llm():
    """Tenta instanciar o LLM para validar a configura√ß√£o de conex√£o."""
    try:
        import os
        from crewai import LLM

        chave_api = os.getenv("OPENAI_API_KEY")
        if not chave_api:
            print("‚õîÔ∏è Teste abortado: a chave de API n√£o est√° dispon√≠vel.")
            return False

        llm = LLM(model="gpt-4o-mini", api_key=chave_api)
        print("‚úîÔ∏è A configura√ß√£o do LLM foi criada com sucesso.")
        return True

    except Exception as e:
        print(f"‚õîÔ∏è Falha ao inicializar o LLM: {e}")
        return False


def testar_instanciacao_crewai():
    """Realiza um teste r√°pido de cria√ß√£o de um agente CrewAI."""
    try:
        import os
        from crewai import LLM, Agent

        chave_api = os.getenv("OPENAI_API_KEY")
        if not chave_api:
            print("‚õîÔ∏è Teste abortado: a chave de API n√£o est√° dispon√≠vel.")
            return False

        llm = LLM(model="gpt-4o-mini", api_key=chave_api)

        # Cria um agente de teste para validar a funcionalidade b√°sica
        agente_teste = Agent(
            role="Agente de Teste", goal="Validar a cria√ß√£o", backstory="N/A", llm=llm
        )

        print("‚úîÔ∏è Um agente de teste foi criado com sucesso.")
        return True

    except Exception as e:
        print(f"‚õîÔ∏è Falha ao criar um agente de teste: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """Ponto de entrada para o script de diagn√≥stico do ambiente."""
    print("ü©∫ CHECK-UP DE SA√öDE DO AMBIENTE CrewAI")
    print("=" * 50)

    etapas_verificacao = [
        ("Vers√£o do Python", validar_versao_python),
        ("Depend√™ncias do Projeto", auditar_dependencias),
        ("Integridade do CrewAI", inspecionar_versao_crewai),
        ("Arquivo de Configura√ß√£o (.env)", verificar_arquivo_config),
        ("Estrutura de Diret√≥rios", checar_estrutura_diretorios),
        ("Conex√£o com LLM", testar_configuracao_llm),
        ("Funcionalidade B√°sica do CrewAI", testar_instanciacao_crewai),
    ]

    resultados_finais = []
    for nome_etapa, funcao_etapa in etapas_verificacao:
        print(f"\nüî¨ Executando verifica√ß√£o: {nome_etapa}...")
        try:
            resultado = funcao_etapa()
            resultados_finais.append((nome_etapa, resultado))
        except Exception as e:
            print(f"‚õîÔ∏è Erro inesperado durante a verifica√ß√£o: {e}")
            resultados_finais.append((nome_etapa, False))

    print("\n" + "=" * 50)
    print("üìã RELAT√ìRIO FINAL DO DIAGN√ìSTICO:")

    sucessos = sum(1 for _, resultado in resultados_finais if resultado)
    total_etapas = len(resultados_finais)

    for nome_etapa, resultado in resultados_finais:
        status_icone = "‚úîÔ∏è" if resultado else "‚õîÔ∏è"
        print(f"{status_icone} {nome_etapa}")

    print(f"\n{sucessos} de {total_etapas} verifica√ß√µes conclu√≠das com sucesso.")

    if sucessos == total_etapas:
        print("\n‚úÖ Ambiente configurado corretamente! Tudo pronto para come√ßar.")
    else:
        print(
            f"\n‚ùóÔ∏è {total_etapas - sucessos} ponto(s) de aten√ß√£o encontrado(s). Por favor, revise os itens marcados com '‚õîÔ∏è' acima."
        )


if __name__ == "__main__":
    main()